import sys
import socket
import heapq
from collections import deque, defaultdict

##############################
# Î©îÏù∏ ÌîÑÎ°úÍ∑∏Îû® ÌÜµÏã† Î≥ÄÏàò Ï†ïÏùò
##############################
HOST = '127.0.0.1'
PORT = 8747
ARGS = sys.argv[1] if len(sys.argv) > 1 else ''
sock = socket.socket()


##############################
# Î©îÏù∏ ÌîÑÎ°úÍ∑∏Îû® ÌÜµÏã† Ìï®Ïàò Ï†ïÏùò
##############################

# Î©îÏù∏ ÌîÑÎ°úÍ∑∏Îû® Ïó∞Í≤∞ Î∞è Ï¥àÍ∏∞Ìôî
def init(nickname):
    try:
        print(f'[STATUS] Trying to connect to {HOST}:{PORT}...')
        sock.connect((HOST, PORT))
        print('[STATUS] Connected')
        init_command = f'INIT {nickname}'

        return submit(init_command)

    except Exception as e:
        print('[ERROR] Failed to connect. Please check if the main program is waiting for connection.')
        print(e)


# Î©îÏù∏ ÌîÑÎ°úÍ∑∏Îû®ÏúºÎ°ú Îç∞Ïù¥ÌÑ∞(Î™ÖÎ†πÏñ¥) Ï†ÑÏÜ°
def submit(string_to_send):
    try:
        send_data = ARGS + string_to_send + ' '
        sock.send(send_data.encode('utf-8'))

        return receive()

    except Exception as e:
        print('[ERROR] Failed to send data. Please check if connection to the main program is valid.')

    return None


# Î©îÏù∏ ÌîÑÎ°úÍ∑∏Îû®ÏúºÎ°úÎ∂ÄÌÑ∞ Îç∞Ïù¥ÌÑ∞ ÏàòÏã†
def receive():
    try:
        game_data = (sock.recv(1024)).decode()

        if game_data and game_data[0].isdigit() and int(game_data[0]) > 0:
            return game_data

        print('[STATUS] No receive data from the main program.')
        close()

    except Exception as e:
        print('[ERROR] Failed to receive data. Please check if connection to the main program is valid.')


# Ïó∞Í≤∞ Ìï¥Ï†ú
def close():
    try:
        if sock is not None:
            sock.close()
        print('[STATUS] Connection closed')

    except Exception as e:
        print('[ERROR] Network connection has been corrupted.')


##############################
# ÏûÖÎ†• Îç∞Ïù¥ÌÑ∞ Î≥ÄÏàò Ï†ïÏùò
##############################
map_data = [[]]  # Îßµ Ï†ïÎ≥¥. Ïòà) map_data[0][1] - [0, 1]Ïùò ÏßÄÌòï/ÏßÄÎ¨º
my_allies = {}  # ÏïÑÍµ∞ Ï†ïÎ≥¥. Ïòà) my_allies['M'] - ÌîåÎ†àÏù¥Ïñ¥ Î≥∏Ïù∏Ïùò Ï†ïÎ≥¥
enemies = {}  # Ï†ÅÍµ∞ Ï†ïÎ≥¥. Ïòà) enemies['X'] - Ï†Å Ìè¨ÌÉëÏùò Ï†ïÎ≥¥
codes = []  # Ï£ºÏñ¥ÏßÑ ÏïîÌò∏Î¨∏. Ïòà) codes[0] - Ï≤´ Î≤àÏß∏ ÏïîÌò∏Î¨∏


##############################
# ÏûÖÎ†• Îç∞Ïù¥ÌÑ∞ ÌååÏã±
##############################

# ÏûÖÎ†• Îç∞Ïù¥ÌÑ∞Î•º ÌååÏã±ÌïòÏó¨ Í∞ÅÍ∞ÅÏùò Î¶¨Ïä§Ìä∏/ÎîïÏÖîÎÑàÎ¶¨Ïóê Ï†ÄÏû•
def parse_data(game_data):
    # ÏûÖÎ†• Îç∞Ïù¥ÌÑ∞Î•º ÌñâÏúºÎ°ú ÎÇòÎàÑÍ∏∞
    game_data_rows = game_data.split('\n')
    row_index = 0

    # Ï≤´ Î≤àÏß∏ Ìñâ Îç∞Ïù¥ÌÑ∞ ÏùΩÍ∏∞
    header = game_data_rows[row_index].split(' ')
    map_height = int(header[0]) if len(header) >= 1 else 0  # ÎßµÏùò ÏÑ∏Î°ú ÌÅ¨Í∏∞
    map_width = int(header[1]) if len(header) >= 2 else 0  # ÎßµÏùò Í∞ÄÎ°ú ÌÅ¨Í∏∞
    num_of_allies = int(header[2]) if len(header) >= 3 else 0  # ÏïÑÍµ∞Ïùò Ïàò
    num_of_enemies = int(header[3]) if len(header) >= 4 else 0  # Ï†ÅÍµ∞Ïùò Ïàò
    num_of_codes = int(header[4]) if len(header) >= 5 else 0  # ÏïîÌò∏Î¨∏Ïùò Ïàò
    row_index += 1

    # Í∏∞Ï°¥Ïùò Îßµ Ï†ïÎ≥¥Î•º Ï¥àÍ∏∞ÌôîÌïòÍ≥† Îã§Ïãú ÏùΩÏñ¥Ïò§Í∏∞
    map_data.clear()
    map_data.extend([['' for c in range(map_width)] for r in range(map_height)])
    for i in range(0, map_height):
        col = game_data_rows[row_index + i].split(' ')
        for j in range(0, len(col)):
            map_data[i][j] = col[j]
    row_index += map_height

    # Í∏∞Ï°¥Ïùò ÏïÑÍµ∞ Ï†ïÎ≥¥Î•º Ï¥àÍ∏∞ÌôîÌïòÍ≥† Îã§Ïãú ÏùΩÏñ¥Ïò§Í∏∞
    my_allies.clear()
    for i in range(row_index, row_index + num_of_allies):
        ally = game_data_rows[i].split(' ')
        ally_name = ally.pop(0) if len(ally) >= 1 else '-'
        my_allies[ally_name] = ally
    row_index += num_of_allies

    # Í∏∞Ï°¥Ïùò Ï†ÅÍµ∞ Ï†ïÎ≥¥Î•º Ï¥àÍ∏∞ÌôîÌïòÍ≥† Îã§Ïãú ÏùΩÏñ¥Ïò§Í∏∞
    enemies.clear()
    for i in range(row_index, row_index + num_of_enemies):
        enemy = game_data_rows[i].split(' ')
        enemy_name = enemy.pop(0) if len(enemy) >= 1 else '-'
        enemies[enemy_name] = enemy
    row_index += num_of_enemies

    # Í∏∞Ï°¥Ïùò ÏïîÌò∏Î¨∏ Ï†ïÎ≥¥Î•º Ï¥àÍ∏∞ÌôîÌïòÍ≥† Îã§Ïãú ÏùΩÏñ¥Ïò§Í∏∞
    codes.clear()
    for i in range(row_index, row_index + num_of_codes):
        codes.append(game_data_rows[i])


# ÌååÏã±Ìïú Îç∞Ïù¥ÌÑ∞Î•º ÌôîÎ©¥Ïóê Ï∂úÎ†•(ÎîîÎ≤ÑÍπÖÏö©)
def print_data():
    # ÌååÏùº Ïù¥Î¶Ñ ÏÑ§Ï†ï
    output_filename = 'game_state_output_1.txt'

    # ÌååÏùºÏùÑ Ïì∞Í∏∞ Î™®Îìú('w', write)Î°ú Ïó¥Í≥† ÎÇ¥Ïö©ÏùÑ ÏûëÏÑ±Ìï©ÎãàÎã§.
    # Ï†ÑÏó≠ Î≥ÄÏàòÎì§Ïóê ÏßÅÏ†ë Ï†ëÍ∑ºÌï©ÎãàÎã§. (game_data, map_data, my_allies, enemies, codes)
    with open(output_filename, 'w', encoding='utf-8') as f:
        # ÏûÖÎ†• Îç∞Ïù¥ÌÑ∞
        f.write(f'\n----------ÏûÖÎ†• Îç∞Ïù¥ÌÑ∞----------\n{game_data}\n----------------------------\n')

        # Îßµ Ï†ïÎ≥¥
        # map_dataÍ∞Ä Ï†ÑÏó≠ Î≥ÄÏàòÏù¥ÎØÄÎ°ú len()ÏùÑ Î∞îÎ°ú ÏÇ¨Ïö©
        f.write(f'\n[Îßµ Ï†ïÎ≥¥] ({len(map_data)} x {len(map_data[0])})\n')
        for i in range(len(map_data)):
            row_str = ''
            for j in range(len(map_data[i])):
                row_str += f'{map_data[i][j]} '
            f.write(row_str.strip() + '\n')  # Ï§Ñ ÎÅùÏùò Í≥µÎ∞± Ï†úÍ±∞ ÌõÑ Ï§ÑÎ∞îÍøà

        # ÏïÑÍµ∞ Ï†ïÎ≥¥
        f.write(f'\n[ÏïÑÍµ∞ Ï†ïÎ≥¥] (ÏïÑÍµ∞ Ïàò: {len(my_allies)})\n')
        for k, v in my_allies.items():
            if k == 'M':
                # v[0], v[1], v[2], v[3] Ï†ëÍ∑º Ïãú Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞Í∞Ä Ï†ïÌôïÌï¥Ïïº Ìï®
                f.write(f'M (ÎÇ¥ ÌÉ±ÌÅ¨) - Ï≤¥Î†•: {v[0]}, Î∞©Ìñ•: {v[1]}, Î≥¥Ïú†Ìïú ÏùºÎ∞ò Ìè¨ÌÉÑ: {v[2]}Í∞ú, Î≥¥Ïú†Ìïú Î©îÍ∞Ä Ìè¨ÌÉÑ: {v[3]}Í∞ú\n')
            elif k == 'H':
                f.write(f'H (ÏïÑÍµ∞ Ìè¨ÌÉë) - Ï≤¥Î†•: {v[0]}\n')
            else:
                f.write(f'{k} (ÏïÑÍµ∞ ÌÉ±ÌÅ¨) - Ï≤¥Î†•: {v[0]}\n')

        # Ï†ÅÍµ∞ Ï†ïÎ≥¥
        f.write(f'\n[Ï†ÅÍµ∞ Ï†ïÎ≥¥] (Ï†ÅÍµ∞ Ïàò: {len(enemies)})\n')
        for k, v in enemies.items():
            if k == 'X':
                f.write(f'X (Ï†ÅÍµ∞ Ìè¨ÌÉë) - Ï≤¥Î†•: {v[0]}\n')
            else:
                f.write(f'{k} (Ï†ÅÍµ∞ ÌÉ±ÌÅ¨) - Ï≤¥Î†•: {v[0]}\n')

        # ÏïîÌò∏Î¨∏ Ï†ïÎ≥¥
        f.write(f'\n[ÏïîÌò∏Î¨∏ Ï†ïÎ≥¥] (ÏïîÌò∏Î¨∏ Ïàò: {len(codes)})\n')
        for i in range(len(codes)):
            f.write(codes[i] + '\n')

    # ÌååÏùº Ï†ÄÏû• ÏôÑÎ£å Î©îÏãúÏßÄÎäî ÏΩòÏÜîÏóê Ï∂úÎ†•
    print(f"Í≤åÏûÑ ÏÉÅÌÉú Ï†ïÎ≥¥Í∞Ä '{output_filename}' ÌååÏùºÏóê Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§. üíæ")


##############################
# ÎãâÎÑ§ÏûÑ ÏÑ§Ï†ï Î∞è ÏµúÏ¥à Ïó∞Í≤∞
##############################
NICKNAME = 'ÏÑúÏö∏18_Ïù¥Î™ÖÏû¨'
game_data = init(NICKNAME)

###################################
# ÏïåÍ≥†Î¶¨Ï¶ò Ìï®Ïàò/Î©îÏÑúÎìú Î∂ÄÎ∂Ñ Íµ¨ÌòÑ ÏãúÏûë
###################################

# ===== Ï†ÑÏó≠ ÏÉÅÌÉú: S ÏÇ¨Ïö© ÏßëÍ≥Ñ & ÏïàÏ†ÑÍ∞ÄÎìú ÌîåÎûòÍ∑∏ =====
S_USAGE_COUNT = 0                   # Î™®Îì† "S" ÎàÑÏ†Å Ïπ¥Ïö¥Ìä∏ (ÏµúÎåÄ 2ÌöåÎßå ÏùòÎØ∏ÏûàÍ≤å ÏÇ¨Ïö©)
safety_stop_used_this_turn = False  # Ïù¥Î≤à ÌÑ¥ ÏïàÏ†ÑÍ∞ÄÎìúÎ°ú Ï†ïÏßÄ(S) ÏÇ¨Ïö© Ïó¨Î∂Ä
stop_counted_this_turn = False      # Ïù¥Î≤à ÌÑ¥Ïóê S_USAGE_COUNT Ï¶ùÍ∞Ä Î∞òÏòÅ Ïó¨Î∂Ä

# Ï†ÑÏó≠ Î≥ÄÏàò - Î©îÍ∞Ä Ìè≠ÌÉÑ ÌöçÎìù Ïó¨Î∂Ä Ï∂îÏ†Å (2Í∞úÎ°ú Í≥†Ï†ï Í∏∞Ï§Ä)
mega_bombs_acquired = False

# Ï†ÑÏó≠ Î≥ÄÏàò - Î∞©Ïñ¥ Î£®ÌîÑ ÏÉÅÌÉú Ï∂îÏ†Å
current_route = None
route_position = 0
route_direction = 1  # 1: Ï†ïÎ∞©Ìñ•, -1: Ïó≠Î∞©Ìñ•

# Î∞©Ìñ• Î≤°ÌÑ∞ Ï†ïÏùò
DIRS = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # Ïö∞, Ìïò, Ï¢å, ÏÉÅ
M_CMD = ["R A", "D A", "L A", "U A"]
S_CMD = ["R F", "D F", "L F", "U F"]
S_MEGA_CMD = ["R F M", "D F M", "L F M", "U F M"]


def get_map_size():
    if map_data and map_data[0]:
        return len(map_data), len(map_data[0])
    return (0, 0)


def find_symbol(grid, symbol):
    """ÎßµÏóêÏÑú ÌäπÏ†ï Í∏∞Ìò∏Ïùò ÏúÑÏπòÎ•º Ï∞æÏïÑ Î∞òÌôò"""
    if not grid or not grid[0]:
        return None
    height, width = len(grid), len(grid[0])
    for row in range(height):
        for col in range(width):
            if grid[row][col] == symbol:
                return (row, col)
    return None


def get_my_position():
    """ÎÇ¥ ÌÉ±ÌÅ¨(M)Ïùò ÏúÑÏπò Î∞òÌôò"""
    return find_symbol(map_data, 'M')


def get_allied_turret_position():
    """ÏïÑÍµ∞ Ìè¨ÌÉë(H)Ïùò ÏúÑÏπò Î∞òÌôò"""
    return find_symbol(map_data, 'H')


def get_mega_bomb_count():
    """ÎÇ¥Í∞Ä Î≥¥Ïú†Ìïú Î©îÍ∞Ä Ìè≠ÌÉÑ Ïàò Î∞òÌôò"""
    if 'M' in my_allies and len(my_allies['M']) >= 4:
        return int(my_allies['M'][3])
    return 0


def caesar_decode(ciphertext, shift):
    """Ïπ¥Ïù¥ÏÇ¨Î•¥ ÏïîÌò∏ Ìï¥ÎèÖ"""
    result = ""
    for char in ciphertext:
        if char.isalpha():
            base = ord('A') if char.isupper() else ord('a')
            result += chr((ord(char) - base - shift) % 26 + base)
        else:
            result += char
    return result


def find_valid_caesar_decode(ciphertext):
    """Ïú†Ìö®Ìïú Ïπ¥Ïù¥ÏÇ¨Î•¥ Ìï¥ÎèÖ Ï∞æÍ∏∞ (ÌÇ§ÏõåÎìú Îß§Ïπ≠)"""
    keywords = [
        "YOUWILLNEVERKNOWUNTILYOUTRY", "THEREISNOROYALROADTOLEARNING",
        "BETTERLATETHANNEVER", "THISTOOSHALLPASSAWAY", "FAITHWITHOUTDEEDSISUSELESS",
        "FORGIVENESSISBETTERTHANREVENGE", "LIFEISNOTALLBEERANDSKITTLES", "UNTILDEATHITISALLLIFE",
        "WHATEVERYOUDOMAKEITPAY", "TIMEISGOLD", "THEONLYCUREFORGRIEFISACTION",
        "GIVEMELIBERTYORGIVEMEDEATH", "APOETISTHEPAINTEROFTHESOUL", "BELIEVEINYOURSELF",
        "NOSWEATNOSWEET", "EARLYBIRDCATCHESTHEWORM", "SEEINGISBELIEVING", "ASKINGCOSTSNOTHING",
        "GOODFENCESMAKESGOODNEIGHBORS", "AROLLINGSTONEGATHERSNOMOSS", "ONESUTMOSTMOVESTHEHEAVENS",
        "LITTLEBYLITTLEDOESTHETRICK", "LIVEASIFYOUWERETODIETOMORROW", "LETBYGONESBEBYGONES",
        "THEBEGINNINGISHALFOFTHEWHOLE", "NOPAINNOGAIN", "STEPBYSTEPGOESALONGWAY",
        "THEDIFFICULTYINLIFEISTHECHOICE", "LIFEISFULLOFUPSANDDOWNS", "ROMEWASNOTBUILTINADAY",
        "IFYOUCANTBEATTHEMJOINTHEM", "NOTHINGVENTUREDNOTHINGGAINED", "KNOWLEDGEINYOUTHISWISDOMINAGE",
        "NOBEESNOHONEY", "WHERETHEREISAWILLTHEREISAWAY", "HABITISSECONDNATURE",
        "SUTMOSTMOVESTHEHEAVENS", "ONLY", "ACTION", "CUREFORGRIEFIS", "SSAFY", "BATTLE",
        "ALGORITHM", "TANK", "MISSION", "CODE", "HERO", "SEIZETHEDAY", "LIFEITSELFISAQUOTATION",
        "LIFEISVENTUREORNOTHING", "DONTDREAMBEIT", "TRYYOURBESTRATHERTHANBETHEBEST",
        "WHATWILLBEWILLBE", "DONTDWELLONTHEPAST", "PASTISJUSTPAST", "FOLLOWYOURHEART",
        "LITTLEBYLITTLEDOESTHETRICK"
    ]
    for shift in range(26):
        decoded = caesar_decode(ciphertext, shift)
        for keyword in keywords:
            if keyword in decoded.upper():
                return decoded
    return caesar_decode(ciphertext, 3)  # Í∏∞Î≥∏ fallback


##############################
# üîí Í≤ΩÍ≥† Íµ¨Ïó≠(Forbidden Zone) Ï≤òÎ¶¨
##############################
def get_forbidden_cells():
    Hn, Wn = get_map_size()
    turret = get_allied_turret_position()
    forbidden = set()
    if not turret:
        return forbidden

    tr, tc = turret

    # Îß® Ïö∞Ï∏°ÏÉÅÎã®: (0, W-1)
    if tr == 0 and tc == Wn - 1:
        candidates = [
            (0, Wn - 2), (0, Wn - 3),
            (1, Wn - 1), (1, Wn - 2), (1, Wn - 3),
            (2, Wn - 1), (2, Wn - 2), (2, Wn - 3),
        ]
        for r, c in candidates:
            if 0 <= r < Hn and 0 <= c < Wn:
                forbidden.add((r, c))

    # Îß® Ï¢åÏ∏°ÌïòÎã®: (H-1, 0)
    if tr == Hn - 1 and tc == 0:
        candidates = [
            (Hn - 1, 1), (Hn - 1, 2),
            (Hn - 2, 0), (Hn - 2, 1), (Hn - 2, 2),
            (Hn - 3, 0), (Hn - 3, 1), (Hn - 3, 2),
        ]
        for r, c in candidates:
            if 0 <= r < Hn and 0 <= c < Wn:
                forbidden.add((r, c))

    return forbidden


def is_forbidden_cell(r, c):
    return (r, c) in get_forbidden_cells()


##############################
# Ïù¥Îèô/Í≤ΩÎ°ú Í¥ÄÎ†® (Îã§ÏùµÏä§Ìä∏Îùº)
##############################
def terrain_cost(r, c):
    """
    ‚òÖ Î™®Îì† Ïù¥Îèô Î°úÏßÅ Í≥µÌÜµ ÏΩîÏä§Ìä∏:
      - G: 1
      - T: 2 (ÌååÍ¥¥ Í∞ÄÎä• ÏßÄÌòï)
      - Í∑∏ Ïô∏/Í∏àÏßÄÏπ∏: ÌÜµÍ≥º Î∂àÍ∞Ä(None)
    """
    if is_forbidden_cell(r, c):
        return None
    cell = map_data[r][c]
    if cell == 'G':
        return 1
    if cell == 'T':
        return 2
    return None  # Ïù¥Îèô Î∂àÍ∞Ä


def reconstruct_commands(prev, start, goal):
    """prev[(r,c)] = (pr,pc, dir_idx) Î°úÎ∂ÄÌÑ∞ Î™ÖÎ†π Î¶¨Ïä§Ìä∏ Ïû¨Íµ¨ÏÑ±"""
    path_dirs = []
    cur = goal
    while cur != start and cur in prev:
        pr, pc, d_idx = prev[cur]
        path_dirs.append(d_idx)
        cur = (pr, pc)
    path_dirs.reverse()
    return [M_CMD[d] for d in path_dirs]


def dijkstra_to_positions(start, targets):
    """
    Îã§ÏùµÏä§Ìä∏ÎùºÎ°ú ÏãúÏûëÏ†êÏóêÏÑú targets ÏßëÌï©(Ï†ïÌôïÌûà Í∑∏ Ï¢åÌëú)ÍπåÏßÄ ÏµúÏÜå ÏΩîÏä§Ìä∏ Í≤ΩÎ°ú.
    (G=1, T=2 ÌóàÏö©)
    """
    Hn, Wn = get_map_size()
    INF = 10**9
    dist = [[INF]*Wn for _ in range(Hn)]
    prev = {}  # (r,c) -> (pr,pc,dir_idx)
    sr, sc = start
    dist[sr][sc] = 0
    pq = [(0, sr, sc)]

    while pq:
        cost, r, c = heapq.heappop(pq)
        if cost != dist[r][c]:
            continue
        if (r, c) in targets:
            return reconstruct_commands(prev, start, (r, c))
        for d_idx, (dr, dc) in enumerate(DIRS):
            nr, nc = r + dr, c + dc
            if 0 <= nr < Hn and 0 <= nc < Wn:
                t_cost = terrain_cost(nr, nc)
                if t_cost is None:
                    continue
                ncost = cost + t_cost
                if ncost < dist[nr][nc]:
                    dist[nr][nc] = ncost
                    prev[(nr, nc)] = (r, c, d_idx)
                    heapq.heappush(pq, (ncost, nr, nc))
    return []


def dijkstra_to_first_adjacent_of(symbol):
    """ÌäπÏ†ï Ïã¨Î≥º(Ïòà: 'F')Ïóê Ïù∏Ï†ëÌïú ÏûÑÏùòÏùò Ïπ∏ÍπåÏßÄ (G=1,T=2) ÏµúÏÜå ÏΩîÏä§Ìä∏ Í≤ΩÎ°ú."""
    start = get_my_position()
    if not start:
        return []
    Hn, Wn = get_map_size()
    adj_targets = set()
    for r in range(Hn):
        for c in range(Wn):
            if terrain_cost(r, c) is None:
                continue
            for dr, dc in DIRS:
                nr, nc = r + dr, c + dc
                if 0 <= nr < Hn and 0 <= nc < Wn and map_data[nr][nc] == symbol:
                    if not is_forbidden_cell(r, c):
                        adj_targets.add((r, c))
                    break
    return dijkstra_to_positions(start, adj_targets)


def dijkstra_to_specific(target_pos):
    """ÌäπÏ†ï Ï¢åÌëúÍπåÏßÄÏùò ÏµúÏÜå ÏΩîÏä§Ìä∏ Í≤ΩÎ°ú(Îã§ÏùµÏä§Ìä∏Îùº) - (G=1, T=2 ÌóàÏö©)"""
    start = get_my_position()
    if not start or not target_pos:
        return []
    if is_forbidden_cell(*target_pos):
        return []
    return dijkstra_to_positions(start, {target_pos})


##############################
# Ï†ÑÌà¨/ÌëúÏ†Å Í¥ÄÎ†®
##############################
def find_enemy_tanks():
    """Ï†Å ÌÉ±ÌÅ¨Îì§Ïùò ÏúÑÏπò Ï∞æÍ∏∞ (E1, E2, E3Îßå)"""
    enemy_positions = []
    Hn, Wn = get_map_size()

    for r in range(Hn):
        for c in range(Wn):
            if map_data[r][c] in ['E1', 'E2', 'E3']:
                enemy_positions.append((r, c, map_data[r][c]))
    return enemy_positions


def find_all_enemies():
    """Î™®Îì† Ï†Å(ÌÉ±ÌÅ¨+Ìè¨ÌÉë) ÏúÑÏπò"""
    res = []
    Hn, Wn = get_map_size()
    for r in range(Hn):
        for c in range(Wn):
            if map_data[r][c] in ['E1', 'E2', 'E3', 'X']:
                res.append((r, c, map_data[r][c]))
    return res


def can_attack(from_pos, to_pos):
    """from_posÏóêÏÑú to_posÎ•º Í≥µÍ≤© Í∞ÄÎä•? (ÏÇ¨Í±∞Î¶¨3, ÏßÅÏÑ†, G/S/WÎßå Ìà¨Í≥º)"""
    if not from_pos or not to_pos:
        return False, -1

    fr, fc = from_pos
    tr, tc = to_pos

    # Í∞ôÏùÄ Ìñâ
    if fr == tr:
        if fc < tc:  # Ïò§Î•∏Ï™Ω
            for c in range(fc + 1, tc):
                if map_data[fr][c] not in ['G', 'S', 'W']:
                    return False, -1
            if abs(tc - fc) <= 3:
                return True, 0
        else:       # ÏôºÏ™Ω
            for c in range(tc + 1, fc):
                if map_data[fr][c] not in ['G', 'S', 'W']:
                    return False, -1
            if abs(fc - tc) <= 3:
                return True, 2

    # Í∞ôÏùÄ Ïó¥
    elif fc == tc:
        if fr < tr:  # ÏïÑÎûò
            for r in range(fr + 1, tr):
                if map_data[r][fc] not in ['G', 'S', 'W']:
                    return False, -1
            if abs(tr - fr) <= 3:
                return True, 1
        else:       # ÏúÑ
            for r in range(tr + 1, fr):
                if map_data[r][fc] not in ['G', 'S', 'W']:
                    return False, -1
            if abs(fr - tr) <= 3:
                return True, 3

    return False, -1


def get_enemy_hp(enemy_code):
    """Ï†Å ÌÉ±ÌÅ¨ HP Ï°∞Ìöå"""
    try:
        if enemy_code in enemies and len(enemies[enemy_code]) >= 1:
            return int(enemies[enemy_code][0])
    except:
        pass
    return None


def distance(pos1, pos2):
    """Îëê ÏúÑÏπò Í∞ÑÏùò Îß®Ìï¥Ìäº Í±∞Î¶¨ Í≥ÑÏÇ∞"""
    if not pos1 or not pos2:
        return float('inf')
    return abs(pos1[0] - pos2[0]) + abs(pos1[1] - pos2[1])


def nearest_enemy_distance(pos):
    es = find_all_enemies()
    if not es:
        return float('inf')
    return min(distance(pos, (er, ec)) for er, ec, _ in es)


##############################
# Ïú†Ìã∏ & ÏïàÏ†ÑÍ∞ÄÎìú
##############################
def cmd_to_dir(cmd):
    for i, m in enumerate(M_CMD):
        if cmd == m:
            return i
    return None


def in_bounds(r, c):
    Hn, Wn = get_map_size()
    return 0 <= r < Hn and 0 <= c < Wn


def is_allied_tank_cell(cell_val):
    """Îßµ ÏÖÄ Í∞íÏù¥ 'Îã§Î•∏ ÏïÑÍµ∞ ÌÉ±ÌÅ¨'Ïù∏ÏßÄ ÌåêÏ†ï(M/H/ÏßÄÌòï/Ï†Å Ï†úÏô∏)"""
    if cell_val in ('', 'G', 'S', 'W', 'T', 'F', 'H', 'M', 'E1', 'E2', 'E3', 'X'):
        return False
    # allies ÎîïÏÖîÎÑàÎ¶¨ ÌÇ§Î°úÎèÑ ÌôïÏù∏ (ÏïàÏ†ÑÏÑ± Í∞ïÌôî)
    return cell_val in my_allies and cell_val not in ('M', 'H')


def path_has_other_ally_between(a, b):
    """aÏôÄ bÍ∞Ä Í∞ôÏùÄ Ìñâ/Ïó¥Ïùº Îïå, ÏÇ¨Ïù¥ Í≤ΩÎ°úÏóê 'Îã§Î•∏ ÏïÑÍµ∞ ÌÉ±ÌÅ¨'Í∞Ä Ï°¥Ïû¨ÌïòÎ©¥ True"""
    ar, ac = a
    br, bc = b
    if ar == br:
        step = 1 if ac < bc else -1
        for c in range(ac + step, bc, step):
            if is_allied_tank_cell(map_data[ar][c]):
                return True
    elif ac == bc:
        step = 1 if ar < br else -1
        for r in range(ar + step, br, step):
            if is_allied_tank_cell(map_data[r][ac]):
                return True
    return False


def enemies_that_can_shoot_pos_clear(pos):
    """posÎ•º 'Ï∞®Ìèê ÏóÜÏù¥' ÏÇ¨Í≤©Ìï† Ïàò ÏûàÎäî Ï†Å Ï¢åÌëú Î™©Î°ù"""
    res = []
    for er, ec, _ in find_all_enemies():
        ok, _d = can_attack((er, ec), pos)
        if ok:
            # can_attackÏùÄ Ïù¥ÎØ∏ Ï∞®ÌèêÍ∞Ä ÏóÜÎäî Í≤ΩÏö∞Îßå True
            res.append((er, ec))
    return res


def enemies_threaten(pos):
    """Ìï¥Îãπ Ï¢åÌëúÍ∞Ä Ï†ÅÏùò ÏÇ¨Í≤©Í≤ΩÎ°ú(Ï∞®Ìèê ÏóÜÏùå)Ïóê ÏûàÎäîÍ∞Ä"""
    return len(enemies_that_can_shoot_pos_clear(pos)) > 0


def track_stop_and_return_S():
    """S ÏÇ¨Ïö© 1Ìöå ÏßëÍ≥Ñ + Ïù¥Î≤à ÌÑ¥ ÏïàÏ†ÑÏ†ïÏßÄ ÌîåÎûòÍ∑∏ ÏÑ§Ï†ï(Îã®, 2Ìöå Ï†úÌïú Ï¥àÍ≥º Í∏àÏßÄ)"""
    global S_USAGE_COUNT, safety_stop_used_this_turn, stop_counted_this_turn
    if S_USAGE_COUNT >= 2:
        return None
    S_USAGE_COUNT += 1
    safety_stop_used_this_turn = True
    stop_counted_this_turn = True
    return "S"


def shoot_adjacent_T_if_any():
    """Ïù∏Ï†ë T Ïö∞ÏÑ† ÏÇ¨Í≤©"""
    mr, mc = get_my_position()
    if (mr, mc) is None:
        return None
    for i, (dr, dc) in enumerate(DIRS):
        nr, nc = mr + dr, mc + dc
        if in_bounds(nr, nc) and map_data[nr][nc] == 'T':
            return S_CMD[i]
    return None


def safe_G_move_if_any():
    """Ï†Å ÏÇ¨Í≤©Í≤ΩÎ°úÍ∞Ä ÏïÑÎãå Ïù∏Ï†ë GÎ°ú Ïù¥Îèô"""
    mr, mc = get_my_position()
    if (mr, mc) is None:
        return None
    best = None
    best_score = (-1, float('inf'))  # (Ï†ÅÍ≥ºÏùò ÏµúÏÜåÍ±∞Î¶¨, turret Í±∞Î¶¨) Ï†ïÎ†¨Ïö©
    trc = get_allied_turret_position()
    for i, (dr, dc) in enumerate(DIRS):
        nr, nc = mr + dr, mc + dc
        if not in_bounds(nr, nc) or is_forbidden_cell(nr, nc):
            continue
        if map_data[nr][nc] != 'G':
            continue
        if enemies_threaten((nr, nc)):
            continue
        # Ïä§ÏΩîÏñ¥: Ï†ÅÍ≥º ÏµúÏÜåÍ±∞Î¶¨ ÏµúÎåÄÌôî, (Î≥¥Ï°∞) Í∏∞ÏßÄÏôÄ Í±∞Î¶¨ ÏµúÏÜåÌôî
        min_enemy = float('inf')
        for er, ec, _ in find_all_enemies():
            d = distance((nr, nc), (er, ec))
            if d < min_enemy:
                min_enemy = d
        turret_d = distance((nr, nc), trc) if trc else 0
        score = (min_enemy, turret_d)
        if score > best_score:
            best_score = score
            best = i
    return M_CMD[best] if best is not None else None


def choose_shoot_T_or_safe_move():
    """1ÏàúÏúÑ Ïù∏Ï†ë T ÏÇ¨Í≤©, 2ÏàúÏúÑ ÏïàÏ†Ñ G Ïù¥Îèô"""
    shootT = shoot_adjacent_T_if_any()
    if shootT:
        return shootT
    return safe_G_move_if_any()


def get_next_pos_for_move_cmd(cmd):
    d = cmd_to_dir(cmd)
    if d is None:
        return None
    mr, mc = get_my_position()
    dr, dc = DIRS[d]
    return (mr + dr, mc + dc)

def find_allied_tanks_positions():
    H, W = get_map_size()
    out = []
    for r in range(H):
        for c in range(W):
            if is_allied_tank_cell(map_data[r][c]):
                out.append((r, c))
    return out

def move_blocks_ally_fire(next_pos):
    """
    ÎÇ¥Í∞Ä next_posÎ°ú Ïù¥ÎèôÌïòÎ©¥ 'ÏïÑÍµ∞‚ÜíÏ†Å' ÏÇ¨Í≤© ÎùºÏù∏ÏùÑ ÎßâÎäîÍ∞Ä?
    (ÏïÑÍµ∞Ïù¥ Ï†ÅÏùÑ Í≥µÍ≤© Í∞ÄÎä•Ìïú ÏÉÅÌÉúÏùº Îïå, Í∑∏ ÏÇ¨Ïù¥Ïóê ÎÇ¥Í∞Ä Îì§Ïñ¥Í∞ÄÎ©¥ True)
    """
    allies = find_allied_tanks_positions()
    enemies_all = find_all_enemies()
    for ar, ac in allies:
        for er, ec, _ in enemies_all:
            ok, _ = can_attack((ar, ac), (er, ec))
            if not ok:
                continue
            if next_pos in cells_between_on_line((ar, ac), (er, ec)):
                return True
    return False

def cells_between_on_line(a, b):
    (r1, c1), (r2, c2) = a, b
    cells = []
    if r1 == r2:
        step = 1 if c1 < c2 else -1
        for c in range(c1 + step, c2, step):
            cells.append((r1, c))
    elif c1 == c2:
        step = 1 if r1 < r2 else -1
        for r in range(r1 + step, r2, step):
            cells.append((r, c1))
    return cells

def apply_safety_guard(action):
    """
    ‚òÖ Ïù¥ÎèôÎ™ÖÎ†πÏóê 'ÏöîÏ≤≠Ìïú Í∑úÏπô' Ï†ÅÏö© ‚òÖ

    if Îã§Ïùå Ïù¥ÎèôÏπ∏Ïù¥ Ï†Å ÏÇ¨Í≤©Í≤ΩÎ°ú(Ï∞®Ìèê ÏóÜÏùå):
        if (Í∑∏ Í≤ΩÎ°úÏÉÅÏóê Ïù¥ÎØ∏ Îã§Î•∏ Ïö∞Î¶¨ÌåÄ ÌÉ±ÌÅ¨Í∞Ä ÏûàÏùå) or (Í∑∏ 'ÏúÑÌòë Ï†Å' Ï§ë ÌïòÎÇòÎùºÎèÑ Ïö∞Î¶¨ ÌÉÄÏõå(H)Î•º ÎïåÎ¶¥ Ïàò ÏûàÎäî ÏúÑÏπò):
            ‚Üí Ïù¥Îèô ÌóàÏö©
        elif (Í∑∏ Í≤ΩÎ°úÏÉÅ ÏïÑÍµ∞Ïù¥ ÎÇòÎ∞ñÏóê ÏóÜÎã§) or (ÎÇ¥ Ïù¥ÎèôÏù¥ 'ÏïÑÍµ∞‚ÜíÏ†Å' Í≥µÍ≤© ÎùºÏù∏ÏùÑ ÎßâÎäîÎã§):
            ‚Üí 'S'Î°ú Î©àÏ∂§ (Ï†ÑÏó≠ Ïπ¥Ïö¥Ìä∏ Í¥ÄÎ¶¨)
               Îã®, Ïù¥ÎØ∏ Ïù¥Î≤à ÌÑ¥ S ÏÇ¨Ïö©/Ï¥ù 2Ìöå ÏÜåÏßÑÏù¥Î©¥
               ‚Üí 1ÏàúÏúÑ Ïù∏Ï†ë T ÏÇ¨Í≤©, 2ÏàúÏúÑ 'ÏÇ¨Í≤© Í≤ΩÎ°ú ÏïÑÎãå' GÎ°ú Ïù¥Îèô
    else:
        ‚Üí Ïù¥Îèô
    """
    d = cmd_to_dir(action)
    if d is None:  # Ïù¥Îèô Î™ÖÎ†πÏù¥ ÏïÑÎãàÎ©¥ Í∑∏ÎåÄÎ°ú
        return action

    next_pos = get_next_pos_for_move_cmd(action)
    if not next_pos or is_forbidden_cell(*next_pos) or not in_bounds(*next_pos):
        # Í∞à Ïàò ÏóÜÎäî Í≥≥ÏúºÎ°úÏùò Î™ÖÎ†π ‚Üí ÌöåÌîº ÏãúÎèÑ
        alt = choose_shoot_T_or_safe_move()
        if alt:
            return alt
        s_try = track_stop_and_return_S()
        return s_try if s_try else action  # Îçî Î™ª Î©àÏ∂îÎ©¥ ÏõêÎûò Ïù¥Îèô Í∞ïÌñâ

    # ÎÇ¥Í∞Ä Ïù¥ÎèôÌï¥ÏÑú 'ÏïÑÍµ∞‚ÜíÏ†Å' Í≥µÍ≤© ÎùºÏù∏ÏùÑ ÎßâÎäîÎã§Î©¥(=ÏïÑÍµ∞Ïùò ÏÇ¨Í≤© Í≤ΩÎ°úÏÉÅÏúºÎ°ú Îì§Ïñ¥Í∞ê) ‚Üí Î©àÏ∂§/ÌöåÌîº
    if move_blocks_ally_fire(next_pos):
        s_try = track_stop_and_return_S()
        if s_try:
            return s_try
        alt = choose_shoot_T_or_safe_move()
        if alt:
            return alt
        return action  # ÏµúÌõÑ: Í∞ïÌñâ

    # Îã§Ïùå Ïπ∏ ÏúÑÌòë Ï†ÅÎì§
    threats = enemies_that_can_shoot_pos_clear(next_pos)

    if threats:
        # 1) Í≤ΩÎ°úÏÉÅÏóê 'Îã§Î•∏ ÏïÑÍµ∞' Ï∞®ÌèêÍ∞Ä Î™®Îëê Ï°¥Ïû¨ÌïòÎ©¥ ÌóàÏö©
        blocked_by_allies = all(path_has_other_ally_between(e, next_pos) for e in threats)

        # 2) ÏúÑÌòë Ï†Å Ï§ë ÌïòÎÇòÎùºÎèÑ Ïö∞Î¶¨ ÌÉÄÏõå(H)Î•º ÎïåÎ¶¥ Ïàò ÏûàÎäî ÏûêÎ¶¨Î©¥ ÌóàÏö©
        hits_turret_any = False
        turret = get_allied_turret_position()
        if turret:
            for e in threats:
                if can_attack(e, turret)[0]:
                    hits_turret_any = True
                    break

        if blocked_by_allies or hits_turret_any:
            return action  # Ïù¥Îèô ÌóàÏö©

        # 3) Ï∞®Ìèê ÏóÜÍ≥† ÌÉÄÏõå ÏÇ¨Ï†ïÍ±∞Î¶¨ÎèÑ ÏïÑÎãàÎ©¥ ‚Üí S Î©àÏ∂§ (Í∞ÄÎä•Ìï† ÎïåÎßå)
        s_try = track_stop_and_return_S()
        if s_try:
            return s_try

        # 4) Ïù¥ÎØ∏ S ÏÜåÏßÑ ‚Üí 1ÏàúÏúÑ Ïù∏Ï†ë T ÏÇ¨Í≤©, 2ÏàúÏúÑ ÏïàÏ†Ñ G Ïù¥Îèô, ÎßàÏßÄÎßâ Í∞ïÌñâ
        alt = choose_shoot_T_or_safe_move()
        if alt:
            return alt
        return action

    # ÏúÑÌòë ÏóÜÏùå ‚Üí Ïù¥Îèô
    return action


##############################
# Ïù¥Îèô/Í≤ΩÎ°ú Ïú†Ìã∏
##############################
def next_step_with_T_break(path):
    """
    Í≤ΩÎ°úÍ∞Ä ÏûàÏùÑ Îïå:
      - Îã§Ïùå Ïπ∏Ïù¥ TÎ©¥ Ìï¥Îãπ Î∞©Ìñ•ÏúºÎ°ú ÏÇ¨Í≤©(S_CMD)ÌïòÏó¨ Í∏∏ÏùÑ Ïó∞Îã§
      - Îã§Ïùå Ïπ∏Ïù¥ GÎ©¥ Í∑∏ÎåÄÎ°ú Ï†ÑÏßÑ(M_CMD, Îã® ÏïàÏ†ÑÍ∞ÄÎìú Ï†ÅÏö© ÏßÄÏ†êÏóêÏÑú Ìò∏Ï∂úÏûêÍ∞Ä Í∞êÏãºÎã§)
    """
    if not path:
        return None
    first_cmd = path[0]
    d = cmd_to_dir(first_cmd)
    if d is None:
        return None
    mr, mc = get_my_position()
    dr, dc = DIRS[d]
    nr, nc = mr + dr, mc + dc
    if in_bounds(nr, nc):
        if map_data[nr][nc] == 'T':
            return S_CMD[d]
        if map_data[nr][nc] == 'G':
            return first_cmd
    return None


def fallback_move_away_from_enemies():
    """
    Í≤ΩÎ°úÍ∞Ä Ï†ÑÌòÄ ÏóÜÏùÑ Îïå:
      - Ïù∏Ï†ë G Ï§ë 'Í∞ÄÏû• Í∞ÄÍπåÏö¥ Ï†ÅÍ≥ºÏùò Í±∞Î¶¨'Í∞Ä ÏµúÎåÄÍ∞Ä ÎêòÎäî Ïπ∏ÏúºÎ°ú 1Ïπ∏ Ïù¥Îèô
      - ÌõÑÎ≥¥ ÏóÜÏúºÎ©¥ None
    """
    my_pos = get_my_position()
    if not my_pos:
        return None
    Hn, Wn = get_map_size()
    mr, mc = my_pos

    best_i = None
    best_score = -1
    for i, (dr, dc) in enumerate(DIRS):
        nr, nc = mr + dr, mc + dc
        if not (0 <= nr < Hn and 0 <= nc < Wn):
            continue
        if is_forbidden_cell(nr, nc):
            continue
        if map_data[nr][nc] != 'G':
            continue
        score = nearest_enemy_distance((nr, nc))
        if score > best_score:
            best_score = score
            best_i = i

    if best_i is not None:
        return M_CMD[best_i]
    return None


##############################
# Ï†ïÏ∞∞ Í≤ΩÍ≥Ñ: Î≤ΩÏóê Î∂ôÏùÄ ÏàòÏßÅ 2Ï†ê ÏôïÎ≥µ
##############################
def get_optimal_defense_positions():
    """
    Ï†ïÏ∞∞(Ìå®Ìä∏Î°§)ÏùÄ 'Î≤ΩÏóê Î∂ôÏùÄ' ÏàòÏßÅ 2Ï†ê ÏôïÎ≥µÏúºÎ°úÎßå:
      - BL(H-1,0):  col=0 ÏóêÏÑú (H-4,0) <-> (H-5,0) Ïö∞ÏÑ† ÏãúÎèÑ
      - TR(0,W-1):  col=W-1 ÏóêÏÑú (3,W-1) <-> (4,W-1) Ïö∞ÏÑ† ÏãúÎèÑ
    """
    turret_pos = get_allied_turret_position()
    if not turret_pos:
        return []

    tr, tc = turret_pos
    Hn, Wn = get_map_size()

    def ok(r, c):
        if not (0 <= r < Hn and 0 <= c < Wn):
            return False
        if is_forbidden_cell(r, c):
            return False
        return map_data[r][c] in ('G', 'T')

    routes = []

    # BL: ÏôºÏ™Ω Î≤Ω(col=0)
    if tr == Hn - 1 and tc == 0:
        col = 0
        seeds = [(Hn - 4, col), (Hn - 5, col)]
        pts = [(r, c) for (r, c) in seeds if ok(r, c)]
        if len(pts) < 2:
            cand_rows = list(range(Hn - 2, max(-1, Hn - 10), -1))
            for r in cand_rows:
                if len(pts) >= 2:
                    break
                if ok(r, col) and (r, col) not in pts:
                    pts.append((r, col))
        if len(pts) >= 2:
            routes.append(("patrol_vertical_left", pts[:2]))
            return routes

    # TR: Ïò§Î•∏Ï™Ω Î≤Ω(col=W-1)
    if tr == 0 and tc == Wn - 1:
        col = Wn - 1
        seeds = [(3, col), (4, col)]
        pts = [(r, c) for (r, c) in seeds if ok(r, c)]
        if len(pts) < 2:
            cand_rows = list(range(1, min(Hn, 10)))
            for r in cand_rows:
                if len(pts) >= 2:
                    break
                if ok(r, col) and (r, col) not in pts:
                    pts.append((r, col))
        if len(pts) >= 2:
            routes.append(("patrol_vertical_right", pts[:2]))
            return routes

    return []


def vertical_step_towards(target):
    """
    Í∞ôÏùÄ Ïó¥(c)Ïù¥Î©¥ ÏÉÅ/ÌïòÎ°ú Ìïú Ïπ∏Îßå Ïù¥Îèô/ÏÇ¨Í≤©Ìï¥ÏÑú Î™©Ìëú Ìñâ(tr)Ïóê Îã§Í∞ÄÍ∞ÑÎã§.
      - Îã§Ïùå Ïπ∏Ïù¥ TÎ©¥ Í∑∏ Î∞©Ìñ•ÏúºÎ°ú Î®ºÏ†Ä ÏÇ¨Í≤©(S_CMD)
      - Îã§Ïùå Ïπ∏Ïù¥ GÎ©¥ Ï†ÑÏßÑ(M_CMD)
    """
    my_pos = get_my_position()
    if not my_pos:
        return None
    r, c = my_pos
    tr, tc = target
    if c != tc:
        return None

    if tr > r:
        d = 1  # ÏïÑÎûò
        nr, nc = r + 1, c
    elif tr < r:
        d = 3  # ÏúÑ
        nr, nc = r - 1, c
    else:
        return None

    if not in_bounds(nr, nc) or is_forbidden_cell(nr, nc):
        return None

    if map_data[nr][nc] == 'T':
        return S_CMD[d]
    if map_data[nr][nc] == 'G':
        return M_CMD[d]
    return None


def dijkstra_to_attack_position(target_pos):
    """
    Î™©ÌëúÎ•º Í≥µÍ≤©Ìï† Ïàò ÏûàÎäî ÏúÑÏπòÍπåÏßÄÏùò ÏµúÏÜå ÏΩîÏä§Ìä∏ Í≤ΩÎ°ú(Îã§ÏùµÏä§Ìä∏Îùº).
    ÌòÑÏû¨ Ïπ∏ÏóêÏÑú target_posÏóê ÏÇ¨Í≤© Í∞ÄÎä•Ìï¥ÏßÄÎäî Ïπ∏ ÎèÑÎã¨ Ïãú Ï¢ÖÎ£å. (G=1,T=2)
    """
    start = get_my_position()
    if not start or not target_pos:
        return []

    Hn, Wn = get_map_size()
    INF = 10**9
    dist = [[INF]*Wn for _ in range(Hn)]
    prev = {}
    sr, sc = start
    dist[sr][sc] = 0
    pq = [(0, sr, sc)]

    while pq:
        cost, r, c = heapq.heappop(pq)
        if cost != dist[r][c]:
            continue

        can_hit, _ = can_attack((r, c), target_pos)
        if can_hit:
            return reconstruct_commands(prev, start, (r, c))

        for d_idx, (dr, dc) in enumerate(DIRS):
            nr, nc = r + dr, c + dc
            if in_bounds(nr, nc):
                t_cost = terrain_cost(nr, nc)
                if t_cost is None:
                    continue
                ncost = cost + t_cost
                if ncost < dist[nr][nc]:
                    dist[nr][nc] = ncost
                    prev[(nr, nc)] = (r, c, d_idx)
                    heapq.heappush(pq, (ncost, nr, nc))
    return []


##############################
# Î≥¥Í∏â Î™®Îìú ÌñâÎèô
##############################
def is_adjacent_to_supply():
    """ÌòÑÏû¨ ÏúÑÏπòÍ∞Ä Î≥¥Í∏âÏãúÏÑ§(F)Ïóê Ïù∏Ï†ëÌïúÏßÄ ÌôïÏù∏"""
    my_pos = get_my_position()
    if not my_pos:
        return False

    r, c = my_pos
    for dr, dc in DIRS:
        nr, nc = r + dr, c + dc
        if in_bounds(nr, nc) and map_data[nr][nc] == 'F':
            return True
    return False


def find_closest_enemy_to_turret():
    """ÏïÑÍµ∞ Ìè¨ÌÉë(H)Ïóê Í∞ÄÏû• Í∞ÄÍπåÏö¥ Ï†Å ÌÉ±ÌÅ¨(E1/E2/E3) ÌïòÎÇò Î∞òÌôò"""
    turret_pos = get_allied_turret_position()
    if not turret_pos:
        return None
    ets = find_enemy_tanks()
    if not ets:
        return None
    tr, tc = turret_pos
    return min(ets, key=lambda e: abs(e[0]-tr) + abs(e[1]-tc))


def decide_supply_phase_action():
    """
    Î©îÍ∞ÄÌÉÑ 2Í∞ú ÌôïÎ≥¥ Ï†Ñ ÎèôÏûë:
      1) ÏÇ¨Í±∞Î¶¨ ÎÇ¥ Ï†Å ‚Üí (Î©îÍ∞ÄÍ∞Ä Ï†ïÌôïÌûà 1Í∞úÎ©¥ Î©îÍ∞Ä) ÎòêÎäî (HP<=30Ïù¥Î©¥ ÏùºÎ∞ò)
      2) F Ïù∏Ï†ë + ÏΩîÎìú ‚Üí Ìï¥ÎèÖ&ÏùëÎãµ
      3) F Ïù∏Ï†ëÍπåÏßÄ Í≤ΩÎ°ú Ï∂îÏ¢Ö (TÎ©¥ ÏÇ¨Í≤©, G Ïù¥ÎèôÏùÄ ÏïàÏ†ÑÍ∞ÄÎìú Ï†ÅÏö©)
      4) Ïã§Ìå® Ïãú Ìè¥Î∞±(ÏïàÏ†ÑÍ∞ÄÎìú Ï†ÅÏö©)
    """
    my_pos = get_my_position()
    if not my_pos:
        return "S"

    # 1) ÏÑ†Í≥µ
    for er, ec, etype in find_enemy_tanks():
        ok, d = can_attack(my_pos, (er, ec))
        if ok:
            hp = get_enemy_hp(etype)
            if get_mega_bomb_count() == 1:
                return S_MEGA_CMD[d]
            if hp is not None and hp <= 30:
                return S_CMD[d]
            break

    # 2) Ìï¥ÎèÖ
    if codes and is_adjacent_to_supply():
        decoded = find_valid_caesar_decode(codes[0])
        print(f"ÏïîÌò∏ : {codes[0]}")
        if decoded:
            print(f"ÏùëÎãµ : G{decoded}")
            return f"G {decoded}"

    # 3) F Ïù∏Ï†ëÍπåÏßÄ
    path = dijkstra_to_first_adjacent_of('F')
    step = next_step_with_T_break(path)
    if step:
        if step in S_CMD:
            return step
        return apply_safety_guard(step)

    # 4) Ìè¥Î∞±
    fb = fallback_move_away_from_enemies()
    if fb:
        return apply_safety_guard(fb)

    return "S"


##############################
# Î∞©Ïñ¥(Ï†ïÏ∞∞) Î™®Îìú ÌñâÎèô - ÏàòÏßÅ ÏôïÎ≥µ
##############################
def decide_defense_action():
    """Î∞©Ïñ¥ Î™®Îìú: ÏàòÏßÅ 2Ï†ê ÏôïÎ≥µ, Ïù¥ÎèôÏóî ÏïàÏ†ÑÍ∞ÄÎìú Ï†ÅÏö©"""
    global current_route, route_position, route_direction

    my_pos = get_my_position()
    if not my_pos:
        return "S"

    # 1) ÏÇ¨Í±∞Î¶¨ ÎÇ¥ Ï†Å ÏÇ¨Í≤©
    for er, ec, etype in find_enemy_tanks():
        ok, d = can_attack(my_pos, (er, ec))
        if ok:
            hp = get_enemy_hp(etype)
            if hp is not None and hp <= 30:
                return S_CMD[d]
            if get_mega_bomb_count() > 0:
                return S_MEGA_CMD[d]
            return S_CMD[d]

    # 2) Ï†ïÏ∞∞ Î£®Ìä∏ Ï§ÄÎπÑ/ÎèôÍ∏∞Ìôî
    defense_routes = get_optimal_defense_positions()
    route_list_only = [route[1] for route in defense_routes]
    if not current_route or (current_route not in route_list_only and route_list_only):
        current_route = route_list_only[0] if route_list_only else None
        route_position = 0
        route_direction = 1

    # 3) Î£®Ìä∏ Ïù¥Îèô (ÏàòÏßÅ Ïö∞ÏÑ†)
    if current_route:
        if my_pos in current_route and len(current_route) > 1:
            idx = current_route.index(my_pos)
            next_idx = idx + route_direction
            if next_idx >= len(current_route):
                next_idx = len(current_route) - 2
                route_direction = -1
            elif next_idx < 0:
                next_idx = 1
                route_direction = 1
            target = current_route[next_idx]
        else:
            target = min(current_route, key=lambda p: distance(my_pos, p))

        vs = vertical_step_towards(target)
        if vs:
            if vs in S_CMD:
                return vs
            return apply_safety_guard(vs)

        path = dijkstra_to_specific(target)
        step = next_step_with_T_break(path)
        if step:
            if step in S_CMD:
                return step
            return apply_safety_guard(step)

    # 4) Ìè¨ÌÉëÏóê Í∞ÄÍπåÏö¥ Ï†ÅÏóêÍ≤å ÏÇ¨Í±∞Î¶¨ ÌôïÎ≥¥ Ïù¥Îèô
    ce = find_closest_enemy_to_turret()
    if ce:
        tr, tc, _ = ce
        path = dijkstra_to_attack_position((tr, tc))
        step = next_step_with_T_break(path)
        if step:
            if step in S_CMD:
                return step
            return apply_safety_guard(step)

    # 5) Ìè¥Î∞±
    fb = fallback_move_away_from_enemies()
    if fb:
        return apply_safety_guard(fb)

    return "S"


###################################
# ÏïåÍ≥†Î¶¨Ï¶ò Ìï®Ïàò/Î©îÏÑúÎìú Î∂ÄÎ∂Ñ Íµ¨ÌòÑ ÎÅù
###################################
parse_data(game_data)
turn_count = 0

def reset_turn_flags():
    """Îß§ ÌÑ¥ ÏãúÏûë Ïãú ÏïàÏ†ÑÍ∞ÄÎìú/S ÏßëÍ≥Ñ ÌîåÎûòÍ∑∏ Î¶¨ÏÖã"""
    global safety_stop_used_this_turn, stop_counted_this_turn
    safety_stop_used_this_turn = False
    stop_counted_this_turn = False


def finalize_stop_count(cmd):
    """
    Ïù¥Î≤à ÌÑ¥ ÏµúÏ¢Ö Î™ÖÎ†πÏù¥ 'S'Ïù¥Í≥†, ÏïÑÏßÅ Ïπ¥Ïö¥Ìä∏ ÎØ∏Î∞òÏòÅÏù¥Î©¥ Ïπ¥Ïö¥Ìä∏ Ï¶ùÍ∞Ä.
    (ÏïàÏ†ÑÍ∞ÄÎìúÏóêÏÑú Ïù¥ÎØ∏ Î∞òÏòÅÎêú Í≤ΩÏö∞Îäî Ï§ëÎ≥µ Î∞©ÏßÄ)
    """
    global S_USAGE_COUNT, stop_counted_this_turn
    if cmd == "S" and not stop_counted_this_turn and S_USAGE_COUNT < 2:
        S_USAGE_COUNT += 1
        stop_counted_this_turn = True


# Î∞òÎ≥µÎ¨∏: Î©îÏù∏ ÌîÑÎ°úÍ∑∏Îû® <-> ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏(Ïù¥ ÏΩîÎìú) Í∞Ñ ÏàúÏ∞®Î°ú Îç∞Ïù¥ÌÑ∞ ÏÜ°ÏàòÏã†(ÎèôÍ∏∞ Ï≤òÎ¶¨)
while game_data is not None:
    # ÌÑ¥ ÏãúÏûë: ÏïàÏ†ÑÍ∞ÄÎìú ÌîåÎûòÍ∑∏ Î¶¨ÏÖã
    reset_turn_flags()
    print_data()
    output = "S"

    mega_count = get_mega_bomb_count()
    if mega_count >= 2:
        mega_bombs_acquired = True

    if (mega_count < 2) and (not mega_bombs_acquired):
        output = decide_supply_phase_action()
    else:
        output = decide_defense_action()

    # ÏµúÏ¢Ö Î™ÖÎ†πÏù¥ SÎ©¥ ÎàÑÎùΩ ÏßëÍ≥Ñ Î≥¥ÏôÑ (Îã®, 2Ìöå Ï†úÌïú)
    finalize_stop_count(output)

    game_data = submit(output)
    if game_data:
        parse_data(game_data)
        turn_count += 1

# Ï¢ÖÎ£å
close()
